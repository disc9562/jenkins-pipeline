pipeline {
    agent any 
    
    environment {
        iOS_Device = '541BED44-E60D-498C-91D9-8E4F46186CC0'
        android1 = '25a4e830e41c7ece'
        // ANDROID_HOME='/Users/jaylin/Library/Android/sdk'
        // PATH='${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:$PATH'
    }


    stages {
        stage('iOS') { 
            steps {
                sh '''
                cd ~/Desktop/FoodTracker
                xcrun simctl boot $iOS_Device
                open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app
                xcodebuild test -project FoodTracker.xcodeproj -scheme FoodTracker -destination 'platform=iOS Simulator,name=iPhone XR,OS=12.1'
                '''
            }
            post{
                always{
                    sh'''
                    xcrun simctl shutdown $iOS_Device
                    '''
                }
            }
        }
        stage('Android'){
            parallel{
                stage('espresso'){
                    steps{
                        sh'''
                        source ~/.bash_profile
                        adb -s $android1 shell am instrument -w -r   -e debug false -e class 'com.example.garycheng.myapplication.DemoTest' com.example.garycheng.myapplication.test/android.support.test.runner.AndroidJUnitRunner
                        '''
                    }
                }
                stage('monkey test'){
                    steps{
                        sh'''
                        source ~/.bash_profile
                        startEmulator()

                        deleteDir()
                        cd ~/Desktop/android-monkey-quick-start
                        ls -al
                        '''
                    }
                }
            }
        }
    }
}

def startEmulator() {
    // reset Android Emulator
    sh 'emulator -wipe-data @Nexus_4_API_23 &'

    // wait for booting
    sh '''
    retry=0
    while
        retry=$((retry+1))
        boot=`adb -e shell getprop init.svc.bootanim`
        if test $? -eq 0 && test "$boot" == 'stopped\r' ; then
            echo 'Emulator is ready'
            break
        fi
        if test $retry -ge 90 ; then
            echo 'Timeout (90 seconds) reached; failed to start emulator'
            break
        fi
        # check interval: 1 sec
        sleep 1
    do :; done
    '''
}